# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(38, 31, 38, 35)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scored <- c(25, 30, 31, 23)
# Combine your two vectors into a dataframe called `games`
score_data <- data.frame("scored_points" = scores, "points_scored_on" = scored)
View(score_data)
View(score_data)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
score_data$diff <- score_data$scored_points - score_data$points_scored_on
View(score_data)
View(score_data)
# Create a new column "won" which is TRUE if the Seahawks won the game
score_data$won <- score_data$scored_points > score_data$points_scored_on
# Create a vector of the opponent names corresponding to the games played
names <- c("Los Angeles Rams", "Atlanta Falcons",
"New England Patriots", "Dallas Cowboys")
# Assign your dataframe rownames of their opponents
row.names(score_data) <- names
# View your data frame to see how it has changed!
score_data
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
nycflights13::flights
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights <- nycflights13::flights
View(flights)
View(flights)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avgDelay <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay))
View(avgDelay)
View(avgDelay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avgDelay <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports)
nycflights13::airports
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "name")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "dest")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "dest==name")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "faa")
left_join(nycflights13::airports, by = c("dest" = "faa")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = c("dest" = "faa"))
View(avgDelay)
View(avgDelay)
dest_delay_info <- nycflights13::flights %>%
group_by(dest)
View(dest_delay_info)
View(dest_delay_info)
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(
avgDelays = mean(arr_delay, na.rm = TRUE)
)
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(
avgDelays = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(
nycflights13::airports, by = c("dest" = "faa")
)
setwd("C:/Users/camde/OneDrive/Desktop/INFO201/FinalProjectH6")
shiny::runApp()
page_two <- fluidPage(
tags$h1(id = "boxplot_header1","Heights of Olympic Athletes"),
sidebarLayout(
tags$h2(id = "boxplot_header2","How tall are Athletes based off of their Sport?"),
selectInput(inputId = "sport",
label = tags$h3(id = "boxplot_header3","Select sport of intetest"),
choices = unique(data$Sport))),
p("This Boxplot dispalys the heights of olympic athletes based off of the
sport they compete in. Notably we can see how the distribution of athlete's
heights change as the sport of interest is adjusted. A key take-away is that
we can see how athletes' heights vary with the sport they partake in."),
mainPanel(
plotlyOutput(
outputId = "boxplot")
)
page_two <- fluidPage(
tags$h1(id = "boxplot_header1","Heights of Olympic Athletes"),
sidebarLayout(
tags$h2(id = "boxplot_header2","How tall are Athletes based off of their Sport?"),
selectInput(inputId = "sport",
label = tags$h3(id = "boxplot_header3","Select sport of intetest"),
choices = unique(data$Sport))),
p("This Boxplot dispalys the heights of olympic athletes based off of the
sport they compete in. Notably we can see how the distribution of athlete's
heights change as the sport of interest is adjusted. A key take-away is that
we can see how athletes' heights vary with the sport they partake in."),
mainPanel(
plotlyOutput(
outputId = "boxplot")
)
runApp()
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
height_data <- data %>%
group_by(Sport) %>%
summarise(Height) %>%
na.omit()
# Country Chart
source("Country_Specialization.R")
install.packages("reshape2")
# Country Chart
source("Country_Specialization.R")
runApp()
runApp()
runApp()
runApp()
read.csv("Data/120 Years of Olympic History/athlete_events.csv")
df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
View(df)
View(df)
View(df)
##
library(dplyr)
library(ggplot2)
# Country Chart
source("Country_Specialization.R")
runApp()
runApp()
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
height_data <- data %>%
group_by(Sport) %>%
summarise(Height) %>%
na.omit()
# Country Chart
source("Country_Specialization.R")
# Line Graph
source("WinPercentageByCountryChart.R")
server <- function(input, output) {
output$boxplot <- renderPlotly({
#  Title  of boxplot
title <- paste("Height of Olympic", input$sport, "Athletes")
# Boxplot data
boxplot_data <- height_data %>%
filter(Sport == input$sport)
# Boxplot code
boxplot <- ggplot(data = boxplot_data) +
geom_boxplot(mapping = aes(x = Sport, y = Height)) +
labs(title = "Athlete's Heights", x = "Sport", y = "Height (cm)")
# Make Boxplot interactive with Plotly
boxplot_int <- ggplotly(boxplot)
# Return interactive graph
boxplot_int
})
output$country_chart <- renderPlotly({
ggplotly(result(input$country))
})
output$linegraph <- renderPlotyly({
ggplotly(top_medal_percentages(data, input$yearSlider[1], input$yearSlider[2]))
})
}
runApp()
