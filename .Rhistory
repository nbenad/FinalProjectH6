c <- c(4L, 2L, 17L)
print(class(c))
c <- c(2L, 17L, 17.3)
print(class(c))
bmi <- data.frame()
bmi <- data.frame()gender = c('Male','Male', 'Female')
bmi <- data.frame(gender = c('Male','Male', 'Female'), height = c(152, 171, 165), weight = c(81, 93,78), age = c(43, 38, 26))
print(bmi)
print(summary(bmi))
result <- bmi[1;2]
result <- bmi[1:2]
print(result)
print(bmi[1;5])
print(bmi[1:5])
print(bmi[1:3])
print(bmi[2:3])
print(bmi[1:3])
print(bmi[1,3])
print(bmi[1:3,1])
print(bmi[1:3,2])
print(bmi[1:3,3])
bmi$county'USA', 'UK', 'FR'
bmi$county = c('USA', 'UK', 'FR')
print(bmi)
bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3], )
bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3] )
print(bmi)
bmi$ratio2 = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3])
print(bmi)
v <- c(1:5)
print(v)
for(i in v)
print(i)
print(bmi.nbrcall)
print(bmi.nbrcalllll)
print(bmi)
print(bmi[1])
print(bmi[1])
print(bmi,1)
print(bmi[1]
print(bmi[1]0
print(bmi[1])
print(bmi[1,1])
print(bmi[,1])
print(bmi[1,])
print(bmi[2,])
print(bmi[3,])
print(class(bmi[3,]))
print(class(bmi[3,]))
v<-c(1:3)
print(v)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(bmi)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(nrow(bmi))
v <- c(1:nrow(bmi))
print(v)
for(i in v) bmi$s[i] = bmi$r+100
for(si in v) bmi$s[s] = bmi$r[s]+100
for(s in v) bmi$s[s] = bmi$r[s]+100
print(bmi)
v1 <- c ( 1, 2, 3 , 4)
v2 <- c ( 4, 5, 6, 7)
v3 <- v1/v2
print (v3)
bmi$myratio = bmi$height/bmi$weight
print (bmi)
print(b)
print(c)
print(a)
print(e)
print(17)
print(33)
print("hello")
draw(bmi)
source('~/.active-rstudio-document')
install.packages(lintr)
library("lintr")
return(result)
add_three <- function(a){
result  <- a + 3
return(result)
add_three(3)
install.packages("stringr")
library(stringr)
library(stringr)
paste("colar" , "red")
library(stringr)
paste("colar"    , "red")
paste("colar"    "red")
paste("colar" "red")
paste("colar""red")
paste("colar", "red")
paste("colorr", "red")
library(stringr)
View(result)
View(list1)
View(bmi)
install.packages("stringr")
library(stringr)
library(lintr)
install.packages("lintr")
library(lintr)
students_two <- c(paste("Student", c(1:1000)))
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- c(paste("Student", c(1:1000)))
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
math_grades <- c(rnorm(1000, mean = 88, sd = 10))
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
spanish_grades <- c(rnorm(1000, mean = 85, sd = 12))
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
spanish_grades[spanish_grades > 100] <- 100
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
grades <- data.frame(students, math_grades, spanish_grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
num_courses <- ncol(grades[-1])
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grade_diff <- c(grades$math_grades - grades$spanish_grades)
grades <- data.frame(grades, grade_diff)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
better_at_math <- c(grade_diff > 0)
grades <- data.frame(grades, better_at_math)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(better_at_math)
students
library(stringr)
library(lintr)
lint("Assignment.R")
lint("assignment.R")
lint('assignment.R')
install.packages("DPLYR")
insatll.packages(dplyr)
insatll.packages("dplyr"")
k
insatll.packages("dplyr")
insatll.packages(dplyr)
install.packages("dplyr")
library("dyplr")
library(dplyr)
library("dyplr")
install.packages("dplyr
")
library(dplyr)
?Select
?select
fruit <- c("apples", "pears", "pineapple", "watermelon")
cost <- c(2, 3, 5, 7)
fruit_cost_df <- data.frame(fuit, cost)
fruit_cost_df <- data.frame(fruit, cost)
View(fruit_cost_df)
av_cost <- mean(cost)
av_cost <- mean(cost)
source('~/Desktop/INFO201/exercises-nbenad/chapter-18-exercises/exercise-2/Rscript.R')
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[max(cost) , ]
View(cost_most)
cost_most <- fruit_cost_df[, max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , ]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , ]
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "cost"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "fruit"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "fruit"]
library(dplyr)
library(ggplot2)
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
setwd("~/Desktop/INFO201/FinalProjectH6")
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
?order
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = order(Medal = c("Gold", "Bronze", "Silver")), y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
?scale_x_discrete
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
sclae_x_discrete(limites=c("Gold", "Silver", "Bronze", "NA")) +
labs(title = "Heights and Medals of Olympic Athletes")
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limites=c("Gold", "Silver", "Bronze", "NA")) +
labs(title = "Heights and Medals of Olympic Athletes")
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits=c("Gold", "Silver", "Bronze", "NA")) +
labs(title = "Heights and Medals of Olympic Athletes")
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limites = c("Gold", "Silver", "Bronze", "Didn't Medal"))
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal"))
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal"))
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal"))
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal"))
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal")) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
library(dplyr)
library(stringr)
library(leaflet)
library(ggplot2)
library(tidyr)
library(reshape2)
df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv", stringsAsFactors = FALSE)
coutries_bronze_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Bronze") %>%
summarize(Bronze_Count = n()) %>%
arrange(Sport)
coutries_silver_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Silver") %>%
summarize(Silver_Count = n()) %>%
arrange(Sport)
coutries_gold_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Gold") %>%
summarize(Gold_Count = n()) %>%
arrange(Sport)
coutries_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
summarize(Count = n()) %>%
arrange(Sport)
aggregated_table <- coutries_bronze_count %>%
left_join(coutries_silver_count) %>%
left_join(coutries_gold_count) %>%
replace_na(list(Silver_Count = 0, Gold_Count = 0)) %>%
mutate(score = Bronze_Count + Silver_Count * 2 + Gold_Count * 3)
View(aggregated_table)
View(aggregated_table)
TOP_10_country <- aggregated_table %>%
group_by(Team) %>%
summarize(sum_score = sum(score)) %>%
arrange(-sum_score) %>%
slice_head(n = 10)
best_sports <- function(cn) {
return (aggregated_table %>%
filter(Team == cn) %>%
arrange(-score) %>%
select(Team, Sport, Bronze_Count, Silver_Count, Gold_Count) %>%
slice_head(n = 5))
}
for (cn in TOP_10_country$Team) {
c_list[[cn]] = best_sports(cn)
}
for (cn in TOP_10_country$Team) {
c_list[[cn]] = best_sports(cn)
}
melt_plot <- function(df) {
mdf <- melt(df)
return (ggplot(data = mdf, aes(x = Sport, y = value, fill = variable)) +
geom_col(position="dodge") +
geom_text(aes(label = value), position = position_dodge(width = 0.9)))
}
for (cn in TOP_10_country$Team) {
plot_list[[cn]] = melt_plot(c_list[[cn]])
}
library(dplyr)
library(stringr)
library(leaflet)
library(ggplot2)
library(tidyr)
library(reshape2)
df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv", stringsAsFactors = FALSE)
coutries_bronze_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Bronze") %>%
summarize(Bronze_Count = n()) %>%
arrange(Sport)
coutries_silver_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Silver") %>%
summarize(Silver_Count = n()) %>%
arrange(Sport)
coutries_gold_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Gold") %>%
summarize(Gold_Count = n()) %>%
arrange(Sport)
coutries_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
summarize(Count = n()) %>%
arrange(Sport)
aggregated_table <- coutries_bronze_count %>%
left_join(coutries_silver_count) %>%
left_join(coutries_gold_count) %>%
replace_na(list(Silver_Count = 0, Gold_Count = 0)) %>%
mutate(score = Bronze_Count + Silver_Count * 2 + Gold_Count * 3)
TOP_10_country <- aggregated_table %>%
group_by(Team) %>%
summarize(sum_score = sum(score)) %>%
arrange(-sum_score) %>%
slice_head(n = 10)
best_sports <- function(cn) {
return (aggregated_table %>%
filter(Team == cn) %>%
arrange(-score) %>%
select(Team, Sport, Bronze_Count, Silver_Count, Gold_Count) %>%
slice_head(n = 5))
}
c_list <- vector(mode = "list", length = 0)
for (cn in TOP_10_country$Team) {
c_list[[cn]] = best_sports(cn)
}
melt_plot <- function(df) {
mdf <- melt(df)
return (ggplot(data = mdf, aes(x = Sport, y = value, fill = variable)) +
geom_col(position="dodge") +
geom_text(aes(label = value), position = position_dodge(width = 0.9)))
}
plot_list<- vector(mode = "list", length = 0)
for (cn in TOP_10_country$Team) {
plot_list[[cn]] = melt_plot(c_list[[cn]])
}
print(plot_list$`United States`)
print(plot_list$`Soviet Union`)
print(plot_list$Germany)
print(plot_list$Italy)
print(plot_list$`Great Britain`)
print(plot_list$France)
print(plot_list$Sweden)
print(plot_list$Canada)
print(plot_list$Australia)
print(plot_list$Hungary)
install.packages("reshape2")
library(dplyr)
library(stringr)
library(leaflet)
library(ggplot2)
library(tidyr)
library(reshape2)
coutries_bronze_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Bronze") %>%
summarize(Bronze_Count = n()) %>%
arrange(Sport)
coutries_silver_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Silver") %>%
summarize(Silver_Count = n()) %>%
arrange(Sport)
coutries_gold_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
filter(Medal == "Gold") %>%
summarize(Gold_Count = n()) %>%
arrange(Sport)
coutries_count <- df %>%
select(Team, Sport, Medal) %>%
filter(!is.na(Medal)) %>%
group_by(Team, Sport) %>%
summarize(Count = n()) %>%
arrange(Sport)
aggregated_table <- coutries_bronze_count %>%
left_join(coutries_silver_count) %>%
left_join(coutries_gold_count) %>%
replace_na(list(Silver_Count = 0, Gold_Count = 0)) %>%
mutate(score = Bronze_Count + Silver_Count * 2 + Gold_Count * 3)
TOP_10_country <- aggregated_table %>%
group_by(Team) %>%
summarize(sum_score = sum(score)) %>%
arrange(-sum_score) %>%
slice_head(n = 10)
best_sports <- function(cn) {
return (aggregated_table %>%
filter(Team == cn) %>%
arrange(-score) %>%
select(Team, Sport, Bronze_Count, Silver_Count, Gold_Count) %>%
slice_head(n = 5))
}
c_list <- vector(mode = "list", length = 0)
for (cn in TOP_10_country$Team) {
c_list[[cn]] = best_sports(cn)
}
melt_plot <- function(df) {
mdf <- melt(df)
return (ggplot(data = mdf, aes(x = Sport, y = value, fill = variable)) +
geom_col(position="dodge") +
geom_text(aes(label = value), position = position_dodge(width = 0.9)))
}
plot_list<- vector(mode = "list", length = 0)
for (cn in TOP_10_country$Team) {
plot_list[[cn]] = melt_plot(c_list[[cn]])
}
print(plot_list$`United States`)
print(plot_list$`Soviet Union`)
print(plot_list$Germany)
print(plot_list$Italy)
print(plot_list$`Great Britain`)
print(plot_list$France)
print(plot_list$Sweden)
print(plot_list$Canada)
print(plot_list$Australia)
print(plot_list$Hungary)
library(lintr)
lint(Athleteheightchart.R)
lint("Athleteheightchart.R")
lint("Athleteheightchart.R")
lint("Athleteheightchart.R")
lint("Athleteheightchart.R")
## File with a function that returns a boxplot chart of athlete's heights
library(dplyr)
library(ggplot2)
library(forcats)
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
scale_x_discrete(limits = c("Gold", "Silver", "Bronze", "Didn't Medal")) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
