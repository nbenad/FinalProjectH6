# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(38, 31, 38, 35)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scored <- c(25, 30, 31, 23)
# Combine your two vectors into a dataframe called `games`
score_data <- data.frame("scored_points" = scores, "points_scored_on" = scored)
View(score_data)
View(score_data)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
score_data$diff <- score_data$scored_points - score_data$points_scored_on
View(score_data)
View(score_data)
# Create a new column "won" which is TRUE if the Seahawks won the game
score_data$won <- score_data$scored_points > score_data$points_scored_on
# Create a vector of the opponent names corresponding to the games played
names <- c("Los Angeles Rams", "Atlanta Falcons",
"New England Patriots", "Dallas Cowboys")
# Assign your dataframe rownames of their opponents
row.names(score_data) <- names
# View your data frame to see how it has changed!
score_data
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
nycflights13::flights
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights <- nycflights13::flights
View(flights)
View(flights)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avgDelay <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay))
View(avgDelay)
View(avgDelay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avgDelay <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports)
nycflights13::airports
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "name")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "dest")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "dest==name")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = "faa")
left_join(nycflights13::airports, by = c("dest" = "faa")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(avgDelays = mean(arr_delay, na.rm = TRUE)) %>%
left_join(nycflights13::airports, by = c("dest" = "faa"))
View(avgDelay)
View(avgDelay)
dest_delay_info <- nycflights13::flights %>%
group_by(dest)
View(dest_delay_info)
View(dest_delay_info)
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(
avgDelays = mean(arr_delay, na.rm = TRUE)
)
dest_delay_info <- nycflights13::flights %>%
group_by(dest) %>%
summarise(
avgDelays = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(
nycflights13::airports, by = c("dest" = "faa")
)
shiny::runApp('C:/Users/camde/OneDrive/Desktop/INFO201/FinalProjectH6')
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
setwd("C:/Users/camde/OneDrive/Desktop/INFO201/FinalProjectH6")
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
runApp()
height_data <- data %>%
group_by(Sport) %>%
summarise(Height) %>%
na.omit()
runApp()
# Country Chart
source("Country_Specialization.R")
runApp()
# Line Graph
source("WinPercentageByCountryChart.R")
runApp()
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
df <- data
medal_percentage_data <- df %>%
filter(Year >= startYear && Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
startYear = 1896
endYear = 2016
medal_percentage_data <- df %>%
filter(Year >= startYear && Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
View(df)
runApp()
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
# Country Chart
source("Country_Specialization.R")
runApp()
runApp()
startYear = 1920
endYear = 1980
medal_percentage_data <- df %>%
filter(Year >= startYear && Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
top_regions <- medal_percentage_data %>%
group_by(region) %>%
summarise(TotalPct = sum(RegionMedalPct)) %>%
top_n(5, TotalPct)
graph_data <- inner_join(medal_percentage_data, top_regions)
graph <- ggplot(graph_data, aes(x = Year,
y = RegionMedalPct, colour = region)) +
geom_line(size = 1.5) +
ylab("Percentage") +
ggtitle("Percentage of Competing Athletes Who Medaled Grouped By Country") +
facet_grid(rows = vars(Season))
graph
startYear = 1920
endYear = 1980
medal_percentage_data <- df %>%
filter(Year >= startYear && Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
medal_percentage_data <- df %>%
filter(Year >= startYear, Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
medal_percentage_data <- df %>%
filter(Year >= startYear & Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
medal_percentage_data <- df %>%
filter(Year >= startYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
# Interactive boxplot of height and weight by sport
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
regions_df <- read.csv("data/120 Years of Olympic History/noc_regions.csv")
df <- full_join(data, regions_df)
medal_percentage_data <- df %>%
filter(Year >= startYear & Year <= endYear) %>%
group_by(Year, Season, region, Medal) %>%
summarise(TempCnt = n()) %>%
group_by(Year, Season, region) %>%
summarise(RegionMedalPct = sum(TempCnt[!is.na(Medal)]) / sum(TempCnt))
top_regions <- medal_percentage_data %>%
group_by(region) %>%
summarise(TotalPct = sum(RegionMedalPct)) %>%
top_n(5, TotalPct)
View(top_regions)
graph_data <- inner_join(medal_percentage_data, top_regions)
graph <- ggplot(graph_data, aes(x = Year,
y = RegionMedalPct, colour = region)) +
geom_line(size = 1.5) +
ylab("Percentage") +
ggtitle("Percentage of Competing Athletes Who Medaled Grouped By Country") +
facet_grid(rows = vars(Season))
graph
runApp()
runApp()
runApp()
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
regions_data <- read.csv("data/120 Years of Olympic History/noc_regions.csv")
runApp()
runApp()
runApp()
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='cschiman', token='6CE41F7250B499EEA328B5B922BB9156', secret='nL7i1N1wekt3FRlG8yYU+cMoMeDAFVwgqpi81dFP')
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
rsconnect::deployApp('app.R')
runApp()
page_four <- fluidPage(
tags$h1("Countries' Medal Percentages"),
tags$h2("What percentage of competing athletes medaled for each country?"),
sliderInput("yearSlider", label = h3("Year Range"), min = 1896,
max = 2016, value = c(1896, 2016), step = 2, sep=""),
plotlyOutput(
outputId = "linegraph"),
p("This chart intends to represent the skill level of each country over the
time period given by charting the percentage of athletes that medal from
each of the top 5 most skilled countries. The top 5 most skilled countries
are determined by calculating the sum of percentages throughout the time
period given. While this may not be quite as accurate as a mean of
percentages, using a sum to get the top 5 most skilled countries ensures
there is enough data to look at over the given time period. It is important
to note that the Summer Olympics began
in 1896, whereas the Winter ones only
began in 1924. From this data, we can see that Canada, Germany, Norway,
Russia, and the USA are the top 5 most skilled countries for all of Olympic
history. We can also see staggeringly high percentages for the first couple
of Olympic years. This is most likely due to a smaller volume of athletes,
hence a larger win percentage. When looking at all of the Summer Olympics
throughout history, USA seems to be the most consistent and has had the
largest percentage of athletes medal in recent years. When looking at all
of the Winter Olympics throughout history,
several of the top countries follow
similar trends, with Canada taking the lead in recent years, and Russia,
Norway, and the USA all competing for second.")
runApp()
runApp()
df %>% filter(Year = 1980, NOC = "USA")
df %>% filter(Year == 1980 & NOC == "USA")
df %>% filter(Year == 1980 & NOC == "USA" & !is.na(Medal))
df %>% filter(Year == 1980 & NOC == "USA" & !is.na(Medal) & Season == "Summer")
View(df)
df %>% filter(Year == 1980 & NOC == "HUN" & !is.na(Medal) & Season == "Summer")
