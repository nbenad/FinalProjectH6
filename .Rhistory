print(variable[2])
print(variable[1])
print(variable[3])
L <- c(17, 'red')
print(l)
print(L)
print(class(L))
print(class(L))
className(L)
print(className(L))
print(className(L))
list1 <- list(c(1,3,4),21.3,'red')
print(list1)
print(class(list1))
print(list1[1])
print(lista[2])
print(list1[2])
c <- c('red', 'yellow', 'green')
print(class(c))
c <- c(2L)
print(class(2L))
c <- c(2L, 'red')
print(class(c))
c <- c(4L, 2L. 17L)
c <- c(4L, 2L, 17L)
print(class(c))
c <- c(2L, 17L, 17.3)
print(class(c))
bmi <- data.frame()
bmi <- data.frame()gender = c('Male','Male', 'Female')
bmi <- data.frame(gender = c('Male','Male', 'Female'), height = c(152, 171, 165), weight = c(81, 93,78), age = c(43, 38, 26))
print(bmi)
print(summary(bmi))
result <- bmi[1;2]
result <- bmi[1:2]
print(result)
print(bmi[1;5])
print(bmi[1:5])
print(bmi[1:3])
print(bmi[2:3])
print(bmi[1:3])
print(bmi[1,3])
print(bmi[1:3,1])
print(bmi[1:3,2])
print(bmi[1:3,3])
bmi$county'USA', 'UK', 'FR'
bmi$county = c('USA', 'UK', 'FR')
print(bmi)
bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3], )
bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3] )
print(bmi)
bmi$ratio2 = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3])
print(bmi)
v <- c(1:5)
print(v)
for(i in v)
print(i)
print(bmi.nbrcall)
print(bmi.nbrcalllll)
print(bmi)
print(bmi[1])
print(bmi[1])
print(bmi,1)
print(bmi[1]
print(bmi[1]0
print(bmi[1])
print(bmi[1,1])
print(bmi[,1])
print(bmi[1,])
print(bmi[2,])
print(bmi[3,])
print(class(bmi[3,]))
print(class(bmi[3,]))
v<-c(1:3)
print(v)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(bmi)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(nrow(bmi))
v <- c(1:nrow(bmi))
print(v)
for(i in v) bmi$s[i] = bmi$r+100
for(si in v) bmi$s[s] = bmi$r[s]+100
for(s in v) bmi$s[s] = bmi$r[s]+100
print(bmi)
v1 <- c ( 1, 2, 3 , 4)
v2 <- c ( 4, 5, 6, 7)
v3 <- v1/v2
print (v3)
bmi$myratio = bmi$height/bmi$weight
print (bmi)
print(b)
print(c)
print(a)
print(e)
print(17)
print(33)
print("hello")
draw(bmi)
source('~/.active-rstudio-document')
install.packages(lintr)
library("lintr")
return(result)
add_three <- function(a){
result  <- a + 3
return(result)
add_three(3)
install.packages("stringr")
library(stringr)
library(stringr)
paste("colar" , "red")
library(stringr)
paste("colar"    , "red")
paste("colar"    "red")
paste("colar" "red")
paste("colar""red")
paste("colar", "red")
paste("colorr", "red")
library(stringr)
View(result)
View(list1)
View(bmi)
install.packages("stringr")
library(stringr)
library(lintr)
install.packages("lintr")
library(lintr)
students_two <- c(paste("Student", c(1:1000)))
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- c(paste("Student", c(1:1000)))
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
math_grades <- c(rnorm(1000, mean = 88, sd = 10))
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
spanish_grades <- c(rnorm(1000, mean = 85, sd = 12))
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
spanish_grades[spanish_grades > 100] <- 100
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
grades <- data.frame(students, math_grades, spanish_grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
num_courses <- ncol(grades[-1])
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grade_diff <- c(grades$math_grades - grades$spanish_grades)
grades <- data.frame(grades, grade_diff)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
better_at_math <- c(grade_diff > 0)
grades <- data.frame(grades, better_at_math)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(better_at_math)
students
library(stringr)
library(lintr)
lint("Assignment.R")
lint("assignment.R")
lint('assignment.R')
install.packages("DPLYR")
insatll.packages(dplyr)
insatll.packages("dplyr"")
k
insatll.packages("dplyr")
insatll.packages(dplyr)
install.packages("dplyr")
library("dyplr")
library(dplyr)
library("dyplr")
install.packages("dplyr
")
library(dplyr)
?Select
?select
fruit <- c("apples", "pears", "pineapple", "watermelon")
cost <- c(2, 3, 5, 7)
fruit_cost_df <- data.frame(fuit, cost)
fruit_cost_df <- data.frame(fruit, cost)
View(fruit_cost_df)
av_cost <- mean(cost)
av_cost <- mean(cost)
source('~/Desktop/INFO201/exercises-nbenad/chapter-18-exercises/exercise-2/Rscript.R')
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[max(cost) , ]
View(cost_most)
cost_most <- fruit_cost_df[, max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , ]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , ]
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "cost"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "fruit"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "fruit"]
library(shiny)
library(dplyr)
library(ggplot2)
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
setwd("~/Desktop/INFO201/FinalProjectH6")
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
selectInput("sport", label = h3("Sport"), choices = sport_list)
sport_list <- unique(data$Sport)
sport_list <- unique(data$Sport)
View(athlete_df)
View(athlete_df)
data <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
sport_list <- unique(data$Sport)
selectInput("sport", label = h3("Sport"), choices = sport_list)
page_one <- tabPanel(title = "Heights of Athletes",
sidebarLayout(
sidebarPanel = (
h1("Sports and the height of athletes"),
p("Here we can see how the height of Olympic
athletes changes with what sport they participate
in."),
selectInput("sport", label = h3("Sport"), choices = sport_list))
),
mainPanel(
# graph
)
page_one <- tabPanel(title = "Heights of Athletes",
sidebarLayout(
sidebarPanel = (
h1("Sports and the height of athletes"),
p("Here we can see how the height of Olympic
athletes changes with what sport they participate
in."),
selectInput("sport", label = h3("Sport"), choices = sport_list))
),
mainPanel(
# graph
)
?Plotlyoutput
?plotlyOutput
?plotOutput
page_two <- tabPanel(
"Heights of Olympic Athletes",
fluidPage(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = sport_list),
plotOutput(
outputId = boxplot
)
)
)
runApp()
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste(input$x_var, "of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(x = input$x_var, y = input$sport))
boxplot
})
}
runApp()
# Page one refers to boxplot graph
ui <- navbarPage(
"Olympic Athlete Data",
page_two
)
runApp()
sport_list <- unique(data$Sport)
View(data)
View(data)
# Page one refers to boxplot graph
ui <- navbarPage(
"Olympic Athlete Data",
page_two
)
page_two <- tabPanel(
"Heights of Olympic Athletes",
fluidPage(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = sport_list),
plotOutput(
outputId = boxplot
)
)
)
page_two <- tabPanel(
"Heights of Olympic Athletes",
fluidPage(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = sport_list),
plotOutput(
outputId = boxplot
)
)
)
# Page one refers to boxplot graph
ui <- navbarPage(
"Olympic Athlete Data",
page_two
)
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste(input$x_var, "of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(x = data$Height, y = input$sport))
boxplot
})
}
runApp()
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste(data$Height, "of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(x = data$Height, y = input$sport))
boxplot
})
}
runApp()
selectInput("sport", label = h3("Sport"), choices = unique(data$Sport))
page_two <- tabPanel(
"Heights of Olympic Athletes",
fluidPage(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = unique(data$Sport)),
plotOutput(
outputId = boxplot
)
)
)
page_two <- tabPanel(
"Heights of Olympic Athletes",
fluidPage(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = unique(data$Sport)),
plotOutput(
outputId = boxplot
)
)
)
ui <- navbarPage(
"Olympic Athlete Data",
page_two
)
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste(data$Height, "of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(x = data$Height, y = input$sport))
boxplot
})
}
runApp()
runApp()
runApp()
?geom_boxplot
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste("Height of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(y = input$sport))
boxplot
})
}
runApp()
library(dplyr)
library(ggplot2)
source("app_ui.R")
source("app_server.R")
shiny::runApp()
source("app_ui.R")
source("app_server.R")
ui <- navbarPage(title =
"Olympic Athlete Data",
tabPanel("Heights",page_two)
)
page_two <- tabPanel(
"Heights of Olympic Athletes",
sidebarLayout(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = unique(data$Sport)),
plotOutput(
outputId = boxplot
)
)
)
page_two <- fluidPage(
"Heights of Olympic Athletes",
sidebarLayout(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = unique(data$Sport))),
mainPanel(
plotOutput(
outputId = boxplot)
)
)
ui <- navbarPage(title =
"Olympic Athlete Data",
tabPanel("Heights",page_two))
runApp()
runApp()
?mainPanel
?tabPanel
page_two <- fluidPage(
"Heights of Olympic Athletes",
sidebarLayout(
h2("How tall are different sport Athletes"),
selectInput(inputId = "sport",
label = h3("Sport?"),
choices = unique(data$Sport))),
mainPanel(
plotOutput(
outputId = "boxplot")
)
)
runApp()
# Interactive boxplot of height and weight by sport
server <- function(input, output) {
output$boxplot <- renderPlot({
#  Title  of boxplot
title <- paste("Height of Olympic", input$sport, "Athletes")
# Boxplot code
boxplot <- ggplot(data) +
geom_boxplot(mapping = aes(x = input$sport, y = data$Height))
boxplot
})
}
runApp()
?labs
runApp()
runApp()
data
height_data <- data %>%
group_by(Sport) %>%
summarise(Height)
View(athlete_df)
View(height_data)
View(height_data)
runApp()
height_data <- data %>%
group_by(Sport) %>%
summarise(Height, na.rm = TRUE)
View(height_data)
View(height_data)
height_data <- data %>%
na.omit() %>%
group_by(Sport) %>%
summarise(Height)
View(height_data)
View(height_data)
height_data <- data %>%
group_by(Sport) %>%
summarise(Height) %>%
na.omit()
View(height_data)
View(height_data)
runApp()
runApp()
runApp()
ui <- fluidpage(
includeCSS(style.css)
navbarPage(title =
"Olympic Athlete Data",
tabPanel("Heights",page_two)))
runApp()
runApp()
runApp()
runApp()
runApp()
