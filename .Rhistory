bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3], )
bmi$ratio = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3] )
print(bmi)
bmi$ratio2 = c(bmi$height[1]/bmi$weight[1],bmi$height[2]/bmi$weight[2],bmi$height[3]/bmi$weight[3])
print(bmi)
v <- c(1:5)
print(v)
for(i in v)
print(i)
print(bmi.nbrcall)
print(bmi.nbrcalllll)
print(bmi)
print(bmi[1])
print(bmi[1])
print(bmi,1)
print(bmi[1]
print(bmi[1]0
print(bmi[1])
print(bmi[1,1])
print(bmi[,1])
print(bmi[1,])
print(bmi[2,])
print(bmi[3,])
print(class(bmi[3,]))
print(class(bmi[3,]))
v<-c(1:3)
print(v)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(bmi)
for(i in v) bmi$r[i]= bmi$ratio[i]+1
print(nrow(bmi))
v <- c(1:nrow(bmi))
print(v)
for(i in v) bmi$s[i] = bmi$r+100
for(si in v) bmi$s[s] = bmi$r[s]+100
for(s in v) bmi$s[s] = bmi$r[s]+100
print(bmi)
v1 <- c ( 1, 2, 3 , 4)
v2 <- c ( 4, 5, 6, 7)
v3 <- v1/v2
print (v3)
bmi$myratio = bmi$height/bmi$weight
print (bmi)
print(b)
print(c)
print(a)
print(e)
print(17)
print(33)
print("hello")
draw(bmi)
source('~/.active-rstudio-document')
install.packages(lintr)
library("lintr")
return(result)
add_three <- function(a){
result  <- a + 3
return(result)
add_three(3)
install.packages("stringr")
library(stringr)
library(stringr)
paste("colar" , "red")
library(stringr)
paste("colar"    , "red")
paste("colar"    "red")
paste("colar" "red")
paste("colar""red")
paste("colar", "red")
paste("colorr", "red")
library(stringr)
View(result)
View(list1)
View(bmi)
install.packages("stringr")
library(stringr)
library(lintr)
install.packages("lintr")
library(lintr)
students_two <- c(paste("Student", c(1:1000)))
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- c(paste("Student", c(1:1000)))
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
math_grades <- c(rnorm(1000, mean = 88, sd = 10))
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
spanish_grades <- c(rnorm(1000, mean = 85, sd = 12))
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
spanish_grades[spanish_grades > 100] <- 100
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
grades <- data.frame(students, math_grades, spanish_grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
num_courses <- ncol(grades[-1])
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grade_diff <- c(grades$math_grades - grades$spanish_grades)
grades <- data.frame(grades, grade_diff)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
better_at_math <- c(grade_diff > 0)
grades <- data.frame(grades, better_at_math)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(better_at_math)
students
library(stringr)
library(lintr)
lint("Assignment.R")
lint("assignment.R")
lint('assignment.R')
install.packages("DPLYR")
insatll.packages(dplyr)
insatll.packages("dplyr"")
k
insatll.packages("dplyr")
insatll.packages(dplyr)
install.packages("dplyr")
library("dyplr")
library(dplyr)
library("dyplr")
install.packages("dplyr
")
library(dplyr)
?Select
?select
fruit <- c("apples", "pears", "pineapple", "watermelon")
cost <- c(2, 3, 5, 7)
fruit_cost_df <- data.frame(fuit, cost)
fruit_cost_df <- data.frame(fruit, cost)
View(fruit_cost_df)
av_cost <- mean(cost)
av_cost <- mean(cost)
source('~/Desktop/INFO201/exercises-nbenad/chapter-18-exercises/exercise-2/Rscript.R')
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[max(cost) , ]
View(cost_most)
cost_most <- fruit_cost_df[, max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost)]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , ]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , ]
View(fruit_cost_df)
View(fruit_cost_df)
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "cost"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "cost"]
cost_least <- fruit_cost_df[fruit_cost_df$cost == min(cost) , "fruit"]
cost_most <- fruit_cost_df[fruit_cost_df$cost == max(cost) , "fruit"]
setwd("~/Desktop/INFO201/FinalProjectH6")
athlete_df <- write.csv("data/120 Years of Olympic History/athlete_events.csv")
athlete_df <- write.csv("data\120 Years of Olympic History\athlete_events.csv")
athlete_df <- write.csv("Data\120 Years of Olympic History\athlete_events.csv")
athlete_df <- write.csv("Data/120 Years of Olympic History/athlete_events.csv")
athlete_df <- write.csv("Data/athlete_events.csv")
athlete_df <- write.csv("Data/athlete_events.csv")
athlete_df <- write.csv("Data/athlete_events.csv", StringsAsFactors = FALSE)
?write.csv
athlete_df <- write.csv("Data/athlete_events.csv")
?write.csv
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
View(athlete_df)
View(athlete_df)
source('~/Desktop/INFO201/FinalProjectH6/Athleteheightchart.R', echo=TRUE)
library(ggplot2)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
geomplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = Height))
library(ggplot2)
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = Height & Sex))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = c(Height$Sex)))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sex, y = c(Height)))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = c(Sex, Season), y = Height)))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = c(Sex, Season), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = c(Season), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = (Season), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Season, y = Height))
athlete_height <- function(dataset) {
ret <- ggplot(data = dataset) +
Geom_boxplot(mapping = aes(x = Season, y = Height))
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
ret <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
}
athlete_height(athlete_df)
athlete_height(athlete_df)
ret <- ggplot(data = "dataset") +
geom_boxplot(mapping = aes(x = Season, y = Height))
athlete_height <- function(dataset) {
ret <- ggplot(data = "dataset") +
geom_boxplot(mapping = aes(x = Season, y = Height))
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
ret <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
}
athlete_height <- function(dataset) {
ret <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
ret <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(ret)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
boxplot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(boxplot())
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
boxplot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(boxplot())
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
box_plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(box_plot())
}
athlete_height <- function(dataset) {
box_plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(box_plot())
}
athlete_height(athlete_df)
athlete_height(athlete_df)
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Season, y = Height))
athlete_height <- function(dataset) {
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset <- dataset %>%
group_by(Season & Sex) %>%
summarise(height)
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_df %>%
group_by(Season & Sex)
athlete_df %>%
group_by(Season & Sex)
athlete_df %>%
group_by(Season & Sex)
athlete_df %>%
group_by("Season" & "Sex")
View(athlete_df)
View(athlete_df)
setwd("~/Desktop/INFO201/FinalProjectH6")
library(dplyr)
library(ggplot2)
athlete_height(athlete_df)
athlete_height <- function(dataset) {
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Season, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Sport, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height(athlete_df)
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Year, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Metal, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Team, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Team, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Team, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Team, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Sport, y = Height))
?geom_boxplot
?geom_point
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Sport, y = Height, color = Sex))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Medal, y = Height, color = Sex))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Medal, y = Height, color = Sex))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Medal, y = Height, color = Sex))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Medal, y = Height, color = Sport))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Sport, y = Height, color = Medal))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Sport, y = Height, color = Medal))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Season, y = Height, color = Medal))
second_df <- athlete_df %>%
group_by(Sport) %>%
summarise(sum(Height))
View(second_df)
View(second_df)
second_df <- athlete_df %>%
group_by(Sport) %>%
summarise(sum(Height, na.rm = TRUE))
library(dplyr)
library(ggplot2)
second_df <- athlete_df %>%
group_by(Sport) %>%
summarise(sum(Height, na.rm = TRUE))
View(second_df)
View(second_df)
second_df <- athlete_df %>%
group_by(Sport) %>%
summarise(mean(Height, na.rm = TRUE))
View(second_df)
View(second_df)
second_df <- athlete_df %>%
group_by(Sport) %>%
summarise(Medal, mean(Height, na.rm = TRUE))
second_df <- athlete_df %>%
group_by(Medal) %>%
summarise(mean(Height, na.rm = TRUE))
ggplot(data = second_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height))
ggplot(data = second_df) +
geom_boxplot(mapping = aes(x = Medal, y = mean(Height, na.rm = TRUE)))
second_df <- athlete_df %>%
group_by(Medal) %>%
summarise(mean(Height, na.rm = TRUE))
geom_boxplot(mapping = aes(x = Medal, y = mean(Height, na.rm = TRUE))
second_df <- athlete_df %>%
group_by(Medal) %>%
summarise(Av = mean(Height, na.rm = TRUE))
geom_boxplot(mapping = aes(x = Medal, y = mean(Height, na.rm = TRUE))
geom_point(mapping = aes(x = Height, y = Weight, Color = Sport)
ggplot(data = second_df) +
geom_point(mapping = aes(x = Height, y = Weight, Color = Sport))
library(ggplot2)
ggplot(data = second_df) +
geom_point(mapping = aes(x = Height, y = Weight, Color = Sport))
ggplot(data = athlete_df) +
geom_point(mapping = aes(x = Height, y = Weight, Color = Sport))
?geom_point
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = reorder(Medal, FUN = median), y = Height))
install.packages("forcats")
library(forcats)
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = reorder(Medal, FUN = median), y = Height))
##IGNORE
?geom_point
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = reorder(Medal, FUN = median), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = reorder(Medal, Height, FUN = median), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = fct_reorder(Medal, Height, FUN = median), y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height))
ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
athlete_df$Medal[is.na(athlete_df$Medal)] <- "Didn't Medal"
View(athlete_df)
View(athlete_df)
athlete_df <- read.csv("Data/120 Years of Olympic History/athlete_events.csv")
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
View(athlete_height)
View(athlete_height)
athlete_height <- function(dataset) {
# dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Year, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height))
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
dataset$Medal[[Bronze]] <- "Third"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
dataset$Medal["Bronze"] <- "Third"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
athlete_height <- function(dataset) {
dataset$Medal[is.na(dataset$Medal)] <- "Didn't Medal"
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
return(plot)
}
athlete_height(athlete_df)
plot <- ggplot(data = dataset) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
plot <- ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
plot <- ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
plot <- ggplot(data = athlete_df) +
geom_boxplot(mapping = aes(x = Medal, y = Height)) +
labs(title = "Heights and Medals of Olympic Athletes")
